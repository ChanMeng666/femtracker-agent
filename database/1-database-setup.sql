-- FemTracker Database Schema
-- Run this in Supabase SQL Editor

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- User profiles (extends auth.users)
CREATE TABLE profiles (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  full_name TEXT,
  age INTEGER,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User preferences
CREATE TABLE user_preferences (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  theme TEXT DEFAULT 'auto',
  primary_color TEXT DEFAULT '#ec4899',
  font_size TEXT DEFAULT 'medium',
  notifications JSONB DEFAULT '{}',
  privacy JSONB DEFAULT '{}',
  accessibility JSONB DEFAULT '{}',
  behavior JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Menstrual cycles (core feature)
CREATE TABLE menstrual_cycles (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  start_date DATE NOT NULL,
  end_date DATE,
  cycle_length INTEGER,
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Period flow tracking
CREATE TABLE period_days (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  cycle_id UUID REFERENCES menstrual_cycles(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  flow_intensity TEXT CHECK (flow_intensity IN ('Light', 'Medium', 'Heavy', 'Spotting')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Symptoms tracking
CREATE TABLE symptoms (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  symptom_type TEXT NOT NULL,
  severity INTEGER CHECK (severity >= 1 AND severity <= 10),
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Mood tracking
CREATE TABLE moods (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  mood_type TEXT NOT NULL,
  intensity INTEGER CHECK (intensity >= 1 AND intensity <= 10),
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Exercise tracking
CREATE TABLE exercises (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  exercise_type TEXT NOT NULL,
  duration_minutes INTEGER NOT NULL,
  intensity INTEGER CHECK (intensity >= 1 AND intensity <= 10),
  calories_burned INTEGER,
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Meals and nutrition
CREATE TABLE meals (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  meal_time TEXT NOT NULL,
  foods TEXT[] NOT NULL,
  calories INTEGER,
  nutrients TEXT[],
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Water intake tracking
CREATE TABLE water_intake (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  amount_ml INTEGER NOT NULL,
  recorded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Lifestyle factors
CREATE TABLE lifestyle_entries (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  sleep_hours DECIMAL(3,1),
  sleep_quality INTEGER CHECK (sleep_quality >= 1 AND sleep_quality <= 10),
  stress_level INTEGER CHECK (stress_level >= 1 AND stress_level <= 10),
  stress_triggers TEXT[],
  coping_methods TEXT[],
  weight_kg DECIMAL(5,2),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Health insights generated by AI
CREATE TABLE health_insights (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  insight_type TEXT CHECK (insight_type IN ('warning', 'tip', 'achievement', 'medical_advice')),
  category TEXT NOT NULL,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  priority INTEGER CHECK (priority >= 1 AND priority <= 5),
  action_required BOOLEAN DEFAULT false,
  is_read BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Notification rules
CREATE TABLE notification_rules (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  type TEXT CHECK (type IN ('cycle', 'health', 'custom')),
  enabled BOOLEAN DEFAULT true,
  schedule JSONB NOT NULL,
  message TEXT NOT NULL,
  conditions JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Notification history
CREATE TABLE notifications (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  rule_id UUID REFERENCES notification_rules(id) ON DELETE SET NULL,
  title TEXT NOT NULL,
  message TEXT NOT NULL,
  type TEXT NOT NULL,
  priority TEXT DEFAULT 'normal',
  is_read BOOLEAN DEFAULT false,
  sent_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  read_at TIMESTAMP WITH TIME ZONE
);

-- Quick daily records
CREATE TABLE quick_records (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  record_type TEXT NOT NULL,
  value TEXT NOT NULL,
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_preferences ENABLE ROW LEVEL SECURITY;
ALTER TABLE menstrual_cycles ENABLE ROW LEVEL SECURITY;
ALTER TABLE period_days ENABLE ROW LEVEL SECURITY;
ALTER TABLE symptoms ENABLE ROW LEVEL SECURITY;
ALTER TABLE moods ENABLE ROW LEVEL SECURITY;
ALTER TABLE exercises ENABLE ROW LEVEL SECURITY;
ALTER TABLE meals ENABLE ROW LEVEL SECURITY;
ALTER TABLE water_intake ENABLE ROW LEVEL SECURITY;
ALTER TABLE lifestyle_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE health_insights ENABLE ROW LEVEL SECURITY;
ALTER TABLE notification_rules ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE quick_records ENABLE ROW LEVEL SECURITY;

-- RLS Policies for profiles
CREATE POLICY "Users can view own profile" ON profiles
  FOR ALL USING (auth.uid() = id);

-- RLS Policies for user_preferences
CREATE POLICY "Users can manage own preferences" ON user_preferences
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for menstrual_cycles
CREATE POLICY "Users can manage own cycles" ON menstrual_cycles
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for period_days
CREATE POLICY "Users can manage own period data" ON period_days
  FOR ALL USING (auth.uid() IN (
    SELECT user_id FROM menstrual_cycles WHERE id = cycle_id
  ));

-- RLS Policies for symptoms
CREATE POLICY "Users can manage own symptoms" ON symptoms
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for moods
CREATE POLICY "Users can manage own moods" ON moods
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for exercises
CREATE POLICY "Users can manage own exercises" ON exercises
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for meals
CREATE POLICY "Users can manage own meals" ON meals
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for water_intake
CREATE POLICY "Users can manage own water intake" ON water_intake
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for lifestyle_entries
CREATE POLICY "Users can manage own lifestyle data" ON lifestyle_entries
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for health_insights
CREATE POLICY "Users can manage own health insights" ON health_insights
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for notification_rules
CREATE POLICY "Users can manage own notification rules" ON notification_rules
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for notifications
CREATE POLICY "Users can manage own notifications" ON notifications
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for quick_records
CREATE POLICY "Users can manage own quick records" ON quick_records
  FOR ALL USING (auth.uid() = user_id);

-- Indexes for performance
CREATE INDEX idx_cycles_user_date ON menstrual_cycles(user_id, start_date DESC);
CREATE INDEX idx_symptoms_user_date ON symptoms(user_id, date DESC);
CREATE INDEX idx_moods_user_date ON moods(user_id, date DESC);
CREATE INDEX idx_exercises_user_date ON exercises(user_id, date DESC);
CREATE INDEX idx_meals_user_date ON meals(user_id, date DESC);
CREATE INDEX idx_water_user_date ON water_intake(user_id, date DESC);
CREATE INDEX idx_lifestyle_user_date ON lifestyle_entries(user_id, date DESC);
CREATE INDEX idx_notifications_user_unread ON notifications(user_id, is_read, sent_at DESC);
CREATE INDEX idx_quick_records_user_date ON quick_records(user_id, date DESC);

-- Function to handle user profile creation
CREATE OR REPLACE FUNCTION handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO profiles (id, email, full_name)
  VALUES (NEW.id, NEW.email, NEW.raw_user_meta_data->>'full_name');
  
  INSERT INTO user_preferences (user_id)
  VALUES (NEW.id);
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to create profile when user signs up
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION handle_new_user();

-- Views for complex queries
CREATE VIEW health_overview AS
SELECT 
  u.id as user_id,
  u.full_name,
  -- Calculate scores from recent data
  COALESCE((SELECT AVG(intensity) FROM moods WHERE user_id = u.id AND date >= CURRENT_DATE - INTERVAL '30 days'), 0) as avg_mood_score,
  COALESCE((SELECT COUNT(*) FROM exercises WHERE user_id = u.id AND date >= CURRENT_DATE - INTERVAL '7 days'), 0) as weekly_exercise_count,
  COALESCE((SELECT AVG(sleep_quality) FROM lifestyle_entries WHERE user_id = u.id AND date >= CURRENT_DATE - INTERVAL '7 days'), 0) as avg_sleep_quality,
  COALESCE((SELECT AVG(stress_level) FROM lifestyle_entries WHERE user_id = u.id AND date >= CURRENT_DATE - INTERVAL '7 days'), 0) as avg_stress_level
FROM profiles u; 